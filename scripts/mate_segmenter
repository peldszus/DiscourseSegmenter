#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import argparse

from dsegmenter.mateseg.dependency_graph import read_deptree_file
from dsegmenter.mateseg.segmentation_tree import read_segtree_file
from dsegmenter.mateseg.matesegmenter import MateSegmenter


def load_corpus_folder(folder_path, file_suffix='.suffix',
                       file_type_desc='corpus', reader_func=None):
    print 'Finding {} files...'.format(file_type_desc),
    files = sorted([f for f in os.listdir(folder_path)
                    if f.endswith(file_suffix)])
    print 'found %d.' % len(files)
    texts = set([fn[:-len(file_suffix)] for fn in files])
    corpus = {
        text: reader_func(os.path.join(folder_path, text + file_suffix))
        for text in texts
    }
    return corpus


def load_dep_folder(folder_path, file_suffix_dep='.parsed.conll'):
    return load_corpus_folder(
        folder_path, file_suffix=file_suffix_dep,
        file_type_desc='dependency parse', reader_func=read_deptree_file)


def load_seg_folder(folder_path, file_suffix_seg='.tree'):
    return load_corpus_folder(
        folder_path, file_suffix=file_suffix_seg,
        file_type_desc='discourse segmentation', reader_func=read_segtree_file)


def main():
    # initialize argument parser
    aparser = argparse.ArgumentParser(
        description=("A discourse segmentation model to be trained and ",
                     "tested on dependency parses."))
    aparser.add_argument(
        "mode", help="mode", choices=['eval', 'train', 'segment'])
    aparser.add_argument(
        "in_seg", help=("input folder for segmentation files ",
                        "(will be ignored in test mode)"))
    aparser.add_argument(
        "in_dep", help="input folder for mate dependencies")
    aparser.add_argument(
        "out_folder", help="output folder for predictions or models")
    aparser.add_argument(
        "--model", help="model to use for prediction", nargs=1)
    args = aparser.parse_args()

    if args.mode in ['eval', 'train']:
        seg_corpus = load_seg_folder(args.in_seg)
        dep_corpus = load_dep_folder(args.in_dep)
        ms = MateSegmenter(model=None)
        if args.mode == 'eval':
            ms.cross_validate(seg_corpus, dep_corpus, args.out_folder)
        elif args.mode == 'train':
            ms.train(seg_corpus, dep_corpus, args.out_folder)
    elif args.mode == 'segment':
        dep_corpus = load_dep_folder(args.in_dep)
        if (args.model is None or len(args.model) != 1 or
                args.model[0] == None or args.model[0] == ''):
            print "No model specified, using pretrained model."
            ms = MateSegmenter()
        else:
            ms = MateSegmenter(model=args.model[0])
        ms.segment(dep_corpus, args.out_folder)


if __name__ == "__main__":
    main()
